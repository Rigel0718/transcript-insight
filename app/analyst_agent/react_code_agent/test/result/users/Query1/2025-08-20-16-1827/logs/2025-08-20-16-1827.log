2025-08-20 16:20:31,828 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< START >====
2025-08-20 16:20:31,837 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM chain constructed (prompt → llm → structured output)
2025-08-20 16:20:31,838 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Input preview: {'user_query': '전체 이수 과목(credit_course)에서 전공과 비전공 이수학점(credits) 비율을 원 그래프를 활용해서 표현해줘', 'df_name': '', 'df_desc': '', 'chart_name': '', 'chart_desc': '', 'previous_node': '_START_'}
2025-08-20 16:20:31,839 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Invoking LLM for route decision …
2025-08-20 16:20:33,674 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM invocation completed
2025-08-20 16:20:33,676 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Decision → action=to_gen_df
2025-08-20 16:20:33,679 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Reason: 차트 요청이지만 DF가 없어 먼저 데이터프레임을 생성해야 합니다.
2025-08-20 16:20:33,680 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Notes: 전공과 비전공 이수학점 비율을 계산할 수 있는 데이터프레임 필요.
2025-08-20 16:20:33,682 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: to_gen_df
2025-08-20 16:20:33,684 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode:  Finished in 1.85 second
2025-08-20 16:20:33,685 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< END >====
2025-08-20 16:20:33,694 [INFO] [DataFrameAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameAgentExecutorNode: ====< START >====
2025-08-20 16:20:33,785 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: LLM chain constructed (prompt → llm → JSON parser)
2025-08-20 16:20:33,785 [DEBUG] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: chain input preview: {'user_query': '전체 이수 과목(credit_course)에서 전공과 비전공 이수학점(credits) 비율을 원 그래프를 활용해서 표현해줘', 'dataset': '{\n  "student_info": {\n    "name": "김민지",\n    "university": "연세대학교",\n    "department": "컴퓨터과학과",\n    "degree": "공학사",\n    "date_of_birth": "1998-02-15",\n    "gender": "여",\n    "admission_date": "2017-03-02",\n    "graduation_date": "2021-08-17",\n    "degree_number": "연세대2021(학)1234"\n  },\n  "semesters": [\n    {\n      "year": 2017,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "프로그래밍기초",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "미적분학 I",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터개론",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "영어읽기",\n          "grade": "B+",\n          "credits": 2.0,\n          "category": "V"\n        },\n        {\n          "name": "일반물리학 I",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "대학생활과진로",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 15.0,\n      "gpa": 3.61,\n      "percentage": 91.1\n    },\n    {\n      "year": 2017,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "자료구조",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "선형대수학",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "이산수학",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "디지털논리",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "한국사",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "체육",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 16.0,\n      "gpa": 3.8,\n      "percentage": 93.0\n    },\n    {\n      "year": 2018,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "알고리즘",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터구조",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "확률및통계",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "운영체제",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "글쓰기",\n          "grade": "A0",\n          "credits": 2.0,\n          "category": "V"\n        },\n        {\n          "name": "영어회화",\n          "grade": "B+",\n          "credits": 2.0,\n          "category": "V"\n        }\n      ],\n      "total_credits": 16.0,\n      "gpa": 3.66,\n      "percentage": 91.6\n    },\n    {\n      "year": 2018,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "데이터베이스",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터네트워크",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "소프트웨어공학",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "전자기학",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "경제학개론",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "철학개론",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "합창단",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 19.0,\n      "gpa": 3.67,\n      "percentage": 91.7\n    },\n    {\n      "year": 2019,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "인공지능개론",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "운영체제설계",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터그래픽스",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "수치해석",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "현대문학",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "통계학",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        }\n      ],\n      "total_credits": 18.0,\n      "gpa": 3.75,\n      "percentage": 92.5\n    },\n    {\n      "year": 2019,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "머신러닝",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터보안",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "임베디드시스템",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "인간-컴퓨터 상호작용",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "사회학개론",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "경영학원론",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "요가",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 19.0,\n      "gpa": 3.58,\n      "percentage": 90.8\n    },\n    {\n      "year": 2020,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "데이터마이닝",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "빅데이터개론",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴파일러",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "게임프로그래밍",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "정보이론",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "창업과경영",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "취업세미나",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 19.0,\n      "gpa": 3.83,\n      "percentage": 93.3\n    },\n    {\n      "year": 2020,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "캡스톤디자인",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "딥러닝",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "분산시스템",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "네트워크보안",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "프로젝트관리",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "문화예술과사회",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "미술의이해",\n          "grade": "A0",\n          "credits": 2.0,\n          "category": "Z"\n        },\n        {\n          "name": "디지털음악",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 21.0,\n      "gpa": 3.7,\n      "percentage": 92.0\n    }\n  ],\n  "credit_summary": {\n    "total_credits": 143.0,\n    "total_gpa_points": 507.0,\n    "overall_gpa": 3.7,\n    "overall_percentage": 92.0,\n    "credits_by_category": {\n      "교양필수(A)": 0.0,\n      "학부기초(M)": 0.0,\n      "기초공통(B)": 0.0,\n      "기초교양(V)": 6.0,\n      "전공필수(C)": 0.0,\n      "전공기초교양(X)": 0.0,\n      "전공선택(D)": 102.0,\n      "핵심교양(Y)": 27.0,\n      "교양선택(E)": 0.0,\n      "자유교양(Z)": 8.0,\n      "일반선택(F)": 0.0,\n      "교직(H)": 0.0,\n      "교양기초(K)": 0.0,\n      "복수전공(J)": 0.0,\n      "계열교양(L)": 0.0,\n      "부전공(G)": 0.0\n    },\n    "multi_major_credits": {\n      "2전공(계열교양)(PL)": 0.0,\n      "2전공(전공기초교양)(PX)": 0.0,\n      "2전공(학부기초)(PM)": 0.0,\n      "2전공(전공)(PN)": 0.0,\n      "3전공(계열교양)(QL)": 0.0,\n      "3전공(전공기초교양)(QX)": 0.0,\n      "3전공(학부기초)(QM)": 0.0,\n      "3전공(전공)(QN)": 0.0,\n      "연계융합(학부기초)(RM)": 0.0,\n      "연계융합(전공)(RN)": 0.0\n    }\n  }\n}', 'error_log': ''}
2025-08-20 16:20:33,786 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: Invoking LLM for df_code/df_info …
2025-08-20 16:20:39,732 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: LLM invocation done
2025-08-20 16:20:39,736 [DEBUG] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: raw LLM result: df_code='df_name = "credit_ratio_major_nonmajor"\nimport json\nimport pandas as pd\ndata = json.loads(INPUT_DATA)\n\ntry:\n    semesters = data.get(\'semesters\', [])\nexcept Exception:\n    semesters = []\n\ncourses_list = []\nfor sem in semesters:\n    try:\n        courses = sem.get(\'courses\', [])\n        for c in courses:\n            course = {}\n            course[\'name\'] = c.get(\'name\')\n            course[\'credits\'] = c.get(\'credits\', 0)\n            course[\'category\'] = c.get(\'category\')\n            courses_list.append(course)\n    except Exception:\n        continue\n\n# 전공선택(D), 전공필수(C) 등 D 카테고리만 전공으로 간주, 나머지는 비전공\n# 데이터에 전공필수(C)는 0이지만 혹시 있을 경우 대비\nmajor_categories = {\'C\', \'D\'}\n\nmajor_credits = 0.0\nnonmajor_credits = 0.0\nfor c in courses_list:\n    try:\n        if c[\'category\'] in major_categories:\n            major_credits += float(c[\'credits\'])\n        else:\n            nonmajor_credits += float(c[\'credits\'])\n    except Exception:\n        continue\n\nRESULT_DF = pd.DataFrame({\n    \'category\': [\'Major\', \'Non-Major\'],\n    \'credits\': [major_credits, nonmajor_credits]\n})\n\nsave_df(RESULT_DF, df_name)' df_name='credit_ratio_major_nonmajor' df_desc='전체 이수 과목에서 전공과 비전공 이수학점 비율을 계산하여 데이터프레임으로 생성했습니다.'
2025-08-20 16:20:39,740 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: df_code: df_name = "credit_ratio_major_nonmajor"
import json
import pandas as pd
data = json.loads(INPUT_DATA)

try:
    semesters = data.get('semesters', [])
except Exception:
    semesters = []

courses_list = []
for sem in semesters:
    try:
        courses = sem.get('courses', [])
        for c in courses:
            course = {}
            course['name'] = c.get('name')
            course['credits'] = c.get('credits', 0)
            course['category'] = c.get('category')
            courses_list.append(course)
    except Exception:
        continue

# 전공선택(D), 전공필수(C) 등 D 카테고리만 전공으로 간주, 나머지는 비전공
# 데이터에 전공필수(C)는 0이지만 혹시 있을 경우 대비
major_categories = {'C', 'D'}

major_credits = 0.0
nonmajor_credits = 0.0
for c in courses_list:
    try:
        if c['category'] in major_categories:
            major_credits += float(c['credits'])
        else:
            nonmajor_credits += float(c['credits'])
    except Exception:
        continue

RESULT_DF = pd.DataFrame({
    'category': ['Major', 'Non-Major'],
    'credits': [major_credits, nonmajor_credits]
})

save_df(RESULT_DF, df_name)
2025-08-20 16:20:39,745 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: df_name: credit_ratio_major_nonmajor
2025-08-20 16:20:39,748 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: df_desc: 전체 이수 과목에서 전공과 비전공 이수학점 비율을 계산하여 데이터프레임으로 생성했습니다.
2025-08-20 16:20:39,753 [DEBUG] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: DF CodeGen end
2025-08-20 16:20:39,771 [INFO] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: Executing df_code …
2025-08-20 16:20:39,810 [DEBUG] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: Collected DF meta: {'name': 'credit_ratio_major_nonmajor', 'path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674439_credit_ratio_major_nonmajor.csv', 'rows': 2, 'schema': {'category': 'object', 'credits': 'float64'}, 'format': 'csv'}
2025-08-20 16:20:39,812 [INFO] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: 
2025-08-20 16:20:39,814 [INFO] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: DataFrame execution node completed
2025-08-20 16:20:39,817 [DEBUG] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: DF handles: ['credit_ratio_major_nonmajor']
2025-08-20 16:20:39,819 [DEBUG] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: DF meta: {'name': 'credit_ratio_major_nonmajor', 'path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674439_credit_ratio_major_nonmajor.csv', 'rows': 2, 'schema': {'category': 'object', 'credits': 'float64'}, 'format': 'csv'}
2025-08-20 16:20:39,830 [INFO] [DataFrameAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameAgentExecutorNode:  Finished in 6.13 second
2025-08-20 16:20:39,832 [INFO] [DataFrameAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameAgentExecutorNode: ====< END >====
2025-08-20 16:20:39,839 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< START >====
2025-08-20 16:20:39,847 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM chain constructed (prompt → llm → structured output)
2025-08-20 16:20:39,849 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Input preview: {'user_query': '전체 이수 과목(credit_course)에서 전공과 비전공 이수학점(credits) 비율을 원 그래프를 활용해서 표현해줘', 'df_name': 'credit_ratio_major_nonmajor', 'df_desc': '전체 이수 과목에서 전공과 비전공 이수학점 비율을 계산하여 데이터프레임으로 생성했습니다.', 'chart_name': '', 'chart_desc': '', 'previous_node': 'df_exec'}
2025-08-20 16:20:39,850 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Invoking LLM for route decision …
2025-08-20 16:20:41,167 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM invocation completed
2025-08-20 16:20:41,169 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Decision → action=to_gen_chart
2025-08-20 16:20:41,170 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Reason: 사용자가 차트를 요청하였고, 데이터프레임이 존재하므로 차트 생성을 진행합니다.
2025-08-20 16:20:41,171 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Notes: 전공과 비전공 이수학점 비율을 원 그래프로 시각화
2025-08-20 16:20:41,172 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: to_gen_chart
2025-08-20 16:20:41,173 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode:  Finished in 1.33 second
2025-08-20 16:20:41,174 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< END >====
2025-08-20 16:20:41,180 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: ====< START >====
2025-08-20 16:20:41,247 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: Invoking chart_code_react_agent …
2025-08-20 16:20:41,248 [DEBUG] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: chart_code_react_agent input preview: {'user_query': '전체 이수 과목(credit_course)에서 전공과 비전공 이수학점(credits) 비율을 원 그래프를 활용해서 표현해줘', 'df_name': 'credit_ratio_major_nonmajor', 'df_desc': '전체 이수 과목에서 전공과 비전공 이수학점 비율을 계산하여 데이터프레임으로 생성했습니다.', 'chart_name': '', 'chart_desc': '', 'csv_path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674439_credit_ratio_major_nonmajor.csv', 'run_id': '2025-08-20-16-1827', 'df_meta': {'name': 'credit_ratio_major_nonmajor', 'path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674439_credit_ratio_major_nonmajor.csv', 'rows': 2, 'schema': {'category': 'object', 'credits': 'float64'}, 'format': 'csv'}, 'df_code': 'df_name = "credit_ratio_major_nonmajor"\nimport json\nimport pandas as pd\ndata = json.loads(INPUT_DATA)\n\ntry:\n    semesters = data.get(\'semesters\', [])\nexcept Exception:\n    semesters = []\n\ncourses_list = []\nfor sem in semesters:\n    try:\n        courses = sem.get(\'courses\', [])\n        for c in courses:\n            course = {}\n            course[\'name\'] = c.get(\'name\')\n            course[\'credits\'] = c.get(\'credits\', 0)\n            course[\'category\'] = c.get(\'category\')\n            courses_list.append(course)\n    except Exception:\n        continue\n\n# 전공선택(D), 전공필수(C) 등 D 카테고리만 전공으로 간주, 나머지는 비전공\n# 데이터에 전공필수(C)는 0이지만 혹시 있을 경우 대비\nmajor_categories = {\'C\', \'D\'}\n\nmajor_credits = 0.0\nnonmajor_credits = 0.0\nfor c in courses_list:\n    try:\n        if c[\'category\'] in major_categories:\n            major_credits += float(c[\'credits\'])\n        else:\n            nonmajor_credits += float(c[\'credits\'])\n    except Exception:\n        continue\n\nRESULT_DF = pd.DataFrame({\n    \'category\': [\'Major\', \'Non-Major\'],\n    \'credits\': [major_credits, nonmajor_credits]\n})\n\nsave_df(RESULT_DF, df_name)', 'chart_code': '', 'chart_intent': {}, 'stdout': '', 'stderr': '', 'error_logs': '', 'errors': [], 'attempts': 0, 'debug_font': {}, 'img_path': ''}
2025-08-20 16:20:41,260 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: LLM chain constructed (prompt → llm → JSON parser)
2025-08-20 16:20:41,261 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: user_query received
2025-08-20 16:20:41,263 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: user_query: 전체 이수 과목(credit_course)에서 전공과 비전공 이수학점(credits) 비율을 원 그래프를 활용해서 표현해줘
2025-08-20 16:20:41,265 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: df_name: credit_ratio_major_nonmajor
2025-08-20 16:20:41,266 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: df_desc: 전체 이수 과목에서 전공과 비전공 이수학점 비율을 계산하여 데이터프레임으로 생성했습니다.
2025-08-20 16:20:41,267 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: csv_path: /home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674439_credit_ratio_major_nonmajor.csv
2025-08-20 16:20:41,268 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: df_code preview: df_name = "credit_ratio_major_nonmajor"
import json
import pandas as pd
data = json.loads(INPUT_DATA)

try:
    semesters = data.get('semesters', [])
except Exception:
    semesters = []

courses_list = []
for sem in semesters:
    try:
        courses = sem.get('courses', [])
        for c in courses:
            course = {}
            course['name'] = c.get('name')
            course['credits'] = c.get('credits', 0)
            course['category'] = c.get('category')
            courses_list.append(course)
    except Exception:
        continue

# 전공선택(D), 전공필수(C) 등 D 카테고리만 전공으로 간주, 나머지는 비전공
# 데이터에 전공필수(C)는 0이지만 혹시 있을 경우 대비
major_categories = {'C', 'D'}

major_credits = 0.0
nonmajor_credits = 0.0
for c in courses_list:
    try:
        if c['category'] in major_categories:
            major_credits += float(c['credits'])
        else:
            nonmajor_credits += float(c['credits'])
    except Exception:
        continue

RESULT_DF = pd.DataFrame({
    'category': ['Major', 'Non-Major'],
    'credits': [major_credits, nonmajor_credits]
})

save_df(RESULT_DF, df_name)
2025-08-20 16:20:41,287 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: Invoking LLM for chart code/info …
2025-08-20 16:20:45,170 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: LLM invocation done
2025-08-20 16:20:45,175 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: raw LLM result: chart_code="import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame([{'category': 'Major', 'credits': 102.0}, {'category': 'Non-Major', 'credits': 41.0}])\n\ntry:\n    plt.figure(figsize=(6,6))\n    plt.pie(df['credits'], labels=df['category'], autopct='%1.1f%%', startangle=90, textprops={'fontsize': 12})\n    plt.title('Credit Distribution by Major and Non-Major')\n    save_chart(filename='credit_distribution_pie.png', dpi=170)\nexcept Exception:\n    pass" chart_name='Credit Distribution by Major and Non-Major' chart_desc='전체 이수 과목에서 전공과 비전공 이수학점의 비율을 원 그래프로 시각화하여 각 비중을 한눈에 파악할 수 있도록 표현'
2025-08-20 16:20:45,178 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: Chart code returned → route to 'code_executor'
2025-08-20 16:20:45,180 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: chart_code: import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame([{'category': 'Major', 'credits': 102.0}, {'category': 'Non-Major', 'credits': 41.0}])

try:
    plt.figure(figsize=(6,6))
    plt.pie(df['credits'], labels=df['category'], autopct='%1.1f%%', startangle=90, textprops={'fontsize': 12})
    plt.title('Credit Distribution by Major and Non-Major')
    save_chart(filename='credit_distribution_pie.png', dpi=170)
except Exception:
    pass
2025-08-20 16:20:45,184 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: chart_name='Credit Distribution by Major and Non-Major'
2025-08-20 16:20:45,186 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: chart_desc='전체 이수 과목에서 전공과 비전공 이수학점의 비율을 원 그래프로 시각화하여 각 비중을 한눈에 파악할 수 있도록 표현'
2025-08-20 16:20:45,189 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: Chart CodeGen end
2025-08-20 16:20:45,260 [INFO] [ChartCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeExecutorNode: Executing chart_code …
2025-08-20 16:20:45,423 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode:  Finished in 4.24 second
2025-08-20 16:20:45,424 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: ====< END >====
2025-08-20 16:20:45,427 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< START >====
2025-08-20 16:20:45,434 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM chain constructed (prompt → llm → structured output)
2025-08-20 16:20:45,435 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Input preview: {'user_query': '전체 이수 과목(credit_course)에서 전공과 비전공 이수학점(credits) 비율을 원 그래프를 활용해서 표현해줘', 'df_name': 'credit_ratio_major_nonmajor', 'df_desc': '전체 이수 과목에서 전공과 비전공 이수학점 비율을 계산하여 데이터프레임으로 생성했습니다.', 'chart_name': 'Credit Distribution by Major and Non-Major', 'chart_desc': '전체 이수 과목에서 전공과 비전공 이수학점의 비율을 원 그래프로 시각화하여 각 비중을 한눈에 파악할 수 있도록 표현', 'previous_node': 'chart_exec'}
2025-08-20 16:20:45,436 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Invoking LLM for route decision …
2025-08-20 16:20:47,392 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM invocation completed
2025-08-20 16:20:47,397 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Decision → action=finish
2025-08-20 16:20:47,399 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Reason: DF와 차트가 모두 user_query의 요구를 충족하므로 추가 작업이 필요 없습니다.
2025-08-20 16:20:47,403 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: finish
2025-08-20 16:20:47,407 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode:  Finished in 1.98 second
2025-08-20 16:20:47,411 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< END >====
2025-08-20 16:22:20,729 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< START >====
2025-08-20 16:22:20,737 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM chain constructed (prompt → llm → structured output)
2025-08-20 16:22:20,738 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Input preview: {'user_query': '학기별 GPA(학점)변화를 볼 수 있는 그래프를 그려줘줘', 'df_name': '', 'df_desc': '', 'chart_name': '', 'chart_desc': '', 'previous_node': '_START_'}
2025-08-20 16:22:20,739 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Invoking LLM for route decision …
2025-08-20 16:22:21,932 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM invocation completed
2025-08-20 16:22:21,934 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Decision → action=to_gen_df
2025-08-20 16:22:21,935 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Reason: 차트 요청이지만 DF가 없어 먼저 데이터프레임을 생성해야 합니다.
2025-08-20 16:22:21,936 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Notes: x=학기, y=GPA 시계열 데이터 필요
2025-08-20 16:22:21,936 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: to_gen_df
2025-08-20 16:22:21,938 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode:  Finished in 1.21 second
2025-08-20 16:22:21,939 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< END >====
2025-08-20 16:22:21,944 [INFO] [DataFrameAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameAgentExecutorNode: ====< START >====
2025-08-20 16:22:22,014 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: LLM chain constructed (prompt → llm → JSON parser)
2025-08-20 16:22:22,015 [DEBUG] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: chain input preview: {'user_query': '학기별 GPA(학점)변화를 볼 수 있는 그래프를 그려줘줘', 'dataset': '{\n  "student_info": {\n    "name": "김민지",\n    "university": "연세대학교",\n    "department": "컴퓨터과학과",\n    "degree": "공학사",\n    "date_of_birth": "1998-02-15",\n    "gender": "여",\n    "admission_date": "2017-03-02",\n    "graduation_date": "2021-08-17",\n    "degree_number": "연세대2021(학)1234"\n  },\n  "semesters": [\n    {\n      "year": 2017,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "프로그래밍기초",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "미적분학 I",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터개론",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "영어읽기",\n          "grade": "B+",\n          "credits": 2.0,\n          "category": "V"\n        },\n        {\n          "name": "일반물리학 I",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "대학생활과진로",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 15.0,\n      "gpa": 3.61,\n      "percentage": 91.1\n    },\n    {\n      "year": 2017,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "자료구조",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "선형대수학",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "이산수학",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "디지털논리",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "한국사",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "체육",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 16.0,\n      "gpa": 3.8,\n      "percentage": 93.0\n    },\n    {\n      "year": 2018,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "알고리즘",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터구조",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "확률및통계",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "운영체제",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "글쓰기",\n          "grade": "A0",\n          "credits": 2.0,\n          "category": "V"\n        },\n        {\n          "name": "영어회화",\n          "grade": "B+",\n          "credits": 2.0,\n          "category": "V"\n        }\n      ],\n      "total_credits": 16.0,\n      "gpa": 3.66,\n      "percentage": 91.6\n    },\n    {\n      "year": 2018,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "데이터베이스",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터네트워크",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "소프트웨어공학",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "전자기학",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "경제학개론",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "철학개론",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "합창단",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 19.0,\n      "gpa": 3.67,\n      "percentage": 91.7\n    },\n    {\n      "year": 2019,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "인공지능개론",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "운영체제설계",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터그래픽스",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "수치해석",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "현대문학",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "통계학",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        }\n      ],\n      "total_credits": 18.0,\n      "gpa": 3.75,\n      "percentage": 92.5\n    },\n    {\n      "year": 2019,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "머신러닝",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴퓨터보안",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "임베디드시스템",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "인간-컴퓨터 상호작용",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "사회학개론",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "경영학원론",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "요가",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 19.0,\n      "gpa": 3.58,\n      "percentage": 90.8\n    },\n    {\n      "year": 2020,\n      "semester": "1학기",\n      "courses": [\n        {\n          "name": "데이터마이닝",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "빅데이터개론",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "컴파일러",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "게임프로그래밍",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "정보이론",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "창업과경영",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "취업세미나",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 19.0,\n      "gpa": 3.83,\n      "percentage": 93.3\n    },\n    {\n      "year": 2020,\n      "semester": "2학기",\n      "courses": [\n        {\n          "name": "캡스톤디자인",\n          "grade": "A+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "딥러닝",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "분산시스템",\n          "grade": "A0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "네트워크보안",\n          "grade": "B+",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "프로젝트관리",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "D"\n        },\n        {\n          "name": "문화예술과사회",\n          "grade": "B0",\n          "credits": 3.0,\n          "category": "Y"\n        },\n        {\n          "name": "미술의이해",\n          "grade": "A0",\n          "credits": 2.0,\n          "category": "Z"\n        },\n        {\n          "name": "디지털음악",\n          "grade": "P",\n          "credits": 1.0,\n          "category": "Z"\n        }\n      ],\n      "total_credits": 21.0,\n      "gpa": 3.7,\n      "percentage": 92.0\n    }\n  ],\n  "credit_summary": {\n    "total_credits": 143.0,\n    "total_gpa_points": 507.0,\n    "overall_gpa": 3.7,\n    "overall_percentage": 92.0,\n    "credits_by_category": {\n      "교양필수(A)": 0.0,\n      "학부기초(M)": 0.0,\n      "기초공통(B)": 0.0,\n      "기초교양(V)": 6.0,\n      "전공필수(C)": 0.0,\n      "전공기초교양(X)": 0.0,\n      "전공선택(D)": 102.0,\n      "핵심교양(Y)": 27.0,\n      "교양선택(E)": 0.0,\n      "자유교양(Z)": 8.0,\n      "일반선택(F)": 0.0,\n      "교직(H)": 0.0,\n      "교양기초(K)": 0.0,\n      "복수전공(J)": 0.0,\n      "계열교양(L)": 0.0,\n      "부전공(G)": 0.0\n    },\n    "multi_major_credits": {\n      "2전공(계열교양)(PL)": 0.0,\n      "2전공(전공기초교양)(PX)": 0.0,\n      "2전공(학부기초)(PM)": 0.0,\n      "2전공(전공)(PN)": 0.0,\n      "3전공(계열교양)(QL)": 0.0,\n      "3전공(전공기초교양)(QX)": 0.0,\n      "3전공(학부기초)(QM)": 0.0,\n      "3전공(전공)(QN)": 0.0,\n      "연계융합(학부기초)(RM)": 0.0,\n      "연계융합(전공)(RN)": 0.0\n    }\n  }\n}', 'error_log': ''}
2025-08-20 16:22:22,016 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: Invoking LLM for df_code/df_info …
2025-08-20 16:22:25,946 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: LLM invocation done
2025-08-20 16:22:25,947 [DEBUG] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: raw LLM result: df_code='df_name = "semester_gpa_trend"\nimport json\nimport pandas as pd\ndata = json.loads(INPUT_DATA)\n\nrecords = []\ntry:\n    semesters = data.get(\'semesters\', [])\n    for sem in semesters:\n        year = sem.get(\'year\')\n        semester = sem.get(\'semester\')\n        gpa = sem.get(\'gpa\')\n        if year is not None and semester is not None and gpa is not None:\n            records.append({\'year\': year, \'semester\': semester, \'gpa\': gpa})\nexcept Exception:\n    records = []\n\nRESULT_DF = pd.DataFrame(records)\n\n# 정렬: 연도 오름차순, 학기 순서대로 정렬 (1학기, 2학기)\nsemester_order = {\'1학기\': 1, \'2학기\': 2}\ntry:\n    RESULT_DF[\'semester_order\'] = RESULT_DF[\'semester\'].map(semester_order)\n    RESULT_DF = RESULT_DF.sort_values(by=[\'year\', \'semester_order\']).reset_index(drop=True)\n    RESULT_DF = RESULT_DF.drop(columns=[\'semester_order\'])\nexcept Exception:\n    pass\n\nsave_df(RESULT_DF, df_name)' df_name='semester_gpa_trend' df_desc='학기별 연도와 학기, GPA 정보를 추출하여 학기별 GPA 변화를 확인할 수 있도록 정리한 데이터프레임입니다.'
2025-08-20 16:22:25,957 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: df_code: df_name = "semester_gpa_trend"
import json
import pandas as pd
data = json.loads(INPUT_DATA)

records = []
try:
    semesters = data.get('semesters', [])
    for sem in semesters:
        year = sem.get('year')
        semester = sem.get('semester')
        gpa = sem.get('gpa')
        if year is not None and semester is not None and gpa is not None:
            records.append({'year': year, 'semester': semester, 'gpa': gpa})
except Exception:
    records = []

RESULT_DF = pd.DataFrame(records)

# 정렬: 연도 오름차순, 학기 순서대로 정렬 (1학기, 2학기)
semester_order = {'1학기': 1, '2학기': 2}
try:
    RESULT_DF['semester_order'] = RESULT_DF['semester'].map(semester_order)
    RESULT_DF = RESULT_DF.sort_values(by=['year', 'semester_order']).reset_index(drop=True)
    RESULT_DF = RESULT_DF.drop(columns=['semester_order'])
except Exception:
    pass

save_df(RESULT_DF, df_name)
2025-08-20 16:22:25,958 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: df_name: semester_gpa_trend
2025-08-20 16:22:25,959 [INFO] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: df_desc: 학기별 연도와 학기, GPA 정보를 추출하여 학기별 GPA 변화를 확인할 수 있도록 정리한 데이터프레임입니다.
2025-08-20 16:22:25,960 [DEBUG] [DataFrameCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeGeneratorNode: DF CodeGen end
2025-08-20 16:22:25,964 [INFO] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: Executing df_code …
2025-08-20 16:22:25,980 [DEBUG] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: Collected DF meta: {'name': 'semester_gpa_trend', 'path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674545_semester_gpa_trend.csv', 'rows': 8, 'schema': {'year': 'int64', 'semester': 'object', 'gpa': 'float64'}, 'format': 'csv'}
2025-08-20 16:22:25,981 [INFO] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: 
2025-08-20 16:22:25,982 [INFO] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: DataFrame execution node completed
2025-08-20 16:22:25,983 [DEBUG] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: DF handles: ['semester_gpa_trend']
2025-08-20 16:22:25,984 [DEBUG] [DataFrameCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameCodeExecutorNode: DF meta: {'name': 'semester_gpa_trend', 'path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674545_semester_gpa_trend.csv', 'rows': 8, 'schema': {'year': 'int64', 'semester': 'object', 'gpa': 'float64'}, 'format': 'csv'}
2025-08-20 16:22:25,989 [INFO] [DataFrameAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameAgentExecutorNode:  Finished in 4.04 second
2025-08-20 16:22:25,991 [INFO] [DataFrameAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.DataFrameAgentExecutorNode: ====< END >====
2025-08-20 16:22:25,995 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< START >====
2025-08-20 16:22:26,002 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM chain constructed (prompt → llm → structured output)
2025-08-20 16:22:26,003 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Input preview: {'user_query': '학기별 GPA(학점)변화를 볼 수 있는 그래프를 그려줘줘', 'df_name': 'semester_gpa_trend', 'df_desc': '학기별 연도와 학기, GPA 정보를 추출하여 학기별 GPA 변화를 확인할 수 있도록 정리한 데이터프레임입니다.', 'chart_name': '', 'chart_desc': '', 'previous_node': 'df_exec'}
2025-08-20 16:22:26,004 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Invoking LLM for route decision …
2025-08-20 16:22:27,067 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM invocation completed
2025-08-20 16:22:27,071 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Decision → action=to_gen_chart
2025-08-20 16:22:27,076 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Reason: 사용자가 그래프 생성을 요청하였고, 관련 데이터프레임이 존재하므로 차트를 생성해야 합니다.
2025-08-20 16:22:27,079 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Notes: x=학기, y=GPA 시계열 그래프
2025-08-20 16:22:27,083 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: to_gen_chart
2025-08-20 16:22:27,086 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode:  Finished in 1.09 second
2025-08-20 16:22:27,089 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< END >====
2025-08-20 16:22:27,116 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: ====< START >====
2025-08-20 16:22:27,281 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: Invoking chart_code_react_agent …
2025-08-20 16:22:27,283 [DEBUG] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: chart_code_react_agent input preview: {'user_query': '학기별 GPA(학점)변화를 볼 수 있는 그래프를 그려줘줘', 'df_name': 'semester_gpa_trend', 'df_desc': '학기별 연도와 학기, GPA 정보를 추출하여 학기별 GPA 변화를 확인할 수 있도록 정리한 데이터프레임입니다.', 'chart_name': '', 'chart_desc': '', 'csv_path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674545_semester_gpa_trend.csv', 'run_id': '2025-08-20-16-1827', 'df_meta': {'name': 'semester_gpa_trend', 'path': '/home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674545_semester_gpa_trend.csv', 'rows': 8, 'schema': {'year': 'int64', 'semester': 'object', 'gpa': 'float64'}, 'format': 'csv'}, 'df_code': 'df_name = "semester_gpa_trend"\nimport json\nimport pandas as pd\ndata = json.loads(INPUT_DATA)\n\nrecords = []\ntry:\n    semesters = data.get(\'semesters\', [])\n    for sem in semesters:\n        year = sem.get(\'year\')\n        semester = sem.get(\'semester\')\n        gpa = sem.get(\'gpa\')\n        if year is not None and semester is not None and gpa is not None:\n            records.append({\'year\': year, \'semester\': semester, \'gpa\': gpa})\nexcept Exception:\n    records = []\n\nRESULT_DF = pd.DataFrame(records)\n\n# 정렬: 연도 오름차순, 학기 순서대로 정렬 (1학기, 2학기)\nsemester_order = {\'1학기\': 1, \'2학기\': 2}\ntry:\n    RESULT_DF[\'semester_order\'] = RESULT_DF[\'semester\'].map(semester_order)\n    RESULT_DF = RESULT_DF.sort_values(by=[\'year\', \'semester_order\']).reset_index(drop=True)\n    RESULT_DF = RESULT_DF.drop(columns=[\'semester_order\'])\nexcept Exception:\n    pass\n\nsave_df(RESULT_DF, df_name)', 'chart_code': '', 'chart_intent': {}, 'stdout': '', 'stderr': '', 'error_logs': '', 'errors': [], 'attempts': 0, 'debug_font': {}, 'img_path': ''}
2025-08-20 16:22:27,292 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: LLM chain constructed (prompt → llm → JSON parser)
2025-08-20 16:22:27,293 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: user_query received
2025-08-20 16:22:27,295 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: user_query: 학기별 GPA(학점)변화를 볼 수 있는 그래프를 그려줘줘
2025-08-20 16:22:27,296 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: df_name: semester_gpa_trend
2025-08-20 16:22:27,296 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: df_desc: 학기별 연도와 학기, GPA 정보를 추출하여 학기별 GPA 변화를 확인할 수 있도록 정리한 데이터프레임입니다.
2025-08-20 16:22:27,298 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: csv_path: /home/pollu/transcript_insight/analyst_agent/react_code_agent/test/result/users/TEST_01/2025-08-20-16-1827/artifacts/1755674545_semester_gpa_trend.csv
2025-08-20 16:22:27,298 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: df_code preview: df_name = "semester_gpa_trend"
import json
import pandas as pd
data = json.loads(INPUT_DATA)

records = []
try:
    semesters = data.get('semesters', [])
    for sem in semesters:
        year = sem.get('year')
        semester = sem.get('semester')
        gpa = sem.get('gpa')
        if year is not None and semester is not None and gpa is not None:
            records.append({'year': year, 'semester': semester, 'gpa': gpa})
except Exception:
    records = []

RESULT_DF = pd.DataFrame(records)

# 정렬: 연도 오름차순, 학기 순서대로 정렬 (1학기, 2학기)
semester_order = {'1학기': 1, '2학기': 2}
try:
    RESULT_DF['semester_order'] = RESULT_DF['semester'].map(semester_order)
    RESULT_DF = RESULT_DF.sort_values(by=['year', 'semester_order']).reset_index(drop=True)
    RESULT_DF = RESULT_DF.drop(columns=['semester_order'])
except Exception:
    pass

save_df(RESULT_DF, df_name)
2025-08-20 16:22:27,302 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: Invoking LLM for chart code/info …
2025-08-20 16:22:37,943 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: LLM invocation done
2025-08-20 16:22:37,947 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: raw LLM result: chart_code="import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame([{'Unnamed: 0': 0, 'year': 2017, 'semester': '1학기', 'gpa': 3.61}, {'Unnamed: 0': 1, 'year': 2017, 'semester': '2학기', 'gpa': 3.8}, {'Unnamed: 0': 2, 'year': 2018, 'semester': '1학기', 'gpa': 3.66}, {'Unnamed: 0': 3, 'year': 2018, 'semester': '2학기', 'gpa': 3.67}, {'Unnamed: 0': 4, 'year': 2019, 'semester': '1학기', 'gpa': 3.75}, {'Unnamed: 0': 5, 'year': 2019, 'semester': '2학기', 'gpa': 3.58}, {'Unnamed: 0': 6, 'year': 2020, 'semester': '1학기', 'gpa': 3.83}, {'Unnamed: 0': 7, 'year': 2020, 'semester': '2학기', 'gpa': 3.7}])\n\ntry:\n    semester_order = {'1학기': 1, '2학기': 2}\n    df['semester_order'] = df['semester'].map(semester_order)\n    df = df.sort_values(by=['year', 'semester_order']).reset_index(drop=True)\n    df['period'] = df['year'].astype(str) + ' ' + df['semester']\n    plt.figure(figsize=(10,6))\n    plt.plot(df['period'], df['gpa'], marker='o', linestyle='-', color='b')\n    plt.title('Semester GPA Trends')\n    plt.xlabel('학기')\n    plt.ylabel('GPA')\n    plt.xticks(rotation=45)\n    plt.grid(True, linestyle='--', alpha=0.5)\n    save_chart(filename='semester_gpa_trends.png', dpi=170)\nexcept Exception:\n    pass" chart_name='Semester GPA Trends' chart_desc='학기별 GPA 변화를 시계열 선 그래프로 시각화하여 각 학기별 학점 추이를 쉽게 파악할 수 있도록 함'
2025-08-20 16:22:37,950 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: Chart code returned → route to 'code_executor'
2025-08-20 16:22:37,953 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: chart_code: import pandas as pd
import matplotlib.pyplot as plt

df = pd.DataFrame([{'Unnamed: 0': 0, 'year': 2017, 'semester': '1학기', 'gpa': 3.61}, {'Unnamed: 0': 1, 'year': 2017, 'semester': '2학기', 'gpa': 3.8}, {'Unnamed: 0': 2, 'year': 2018, 'semester': '1학기', 'gpa': 3.66}, {'Unnamed: 0': 3, 'year': 2018, 'semester': '2학기', 'gpa': 3.67}, {'Unnamed: 0': 4, 'year': 2019, 'semester': '1학기', 'gpa': 3.75}, {'Unnamed: 0': 5, 'year': 2019, 'semester': '2학기', 'gpa': 3.58}, {'Unnamed: 0': 6, 'year': 2020, 'semester': '1학기', 'gpa': 3.83}, {'Unnamed: 0': 7, 'year': 2020, 'semester': '2학기', 'gpa': 3.7}])

try:
    semester_order = {'1학기': 1, '2학기': 2}
    df['semester_order'] = df['semester'].map(semester_order)
    df = df.sort_values(by=['year', 'semester_order']).reset_index(drop=True)
    df['period'] = df['year'].astype(str) + ' ' + df['semester']
    plt.figure(figsize=(10,6))
    plt.plot(df['period'], df['gpa'], marker='o', linestyle='-', color='b')
    plt.title('Semester GPA Trends')
    plt.xlabel('학기')
    plt.ylabel('GPA')
    plt.xticks(rotation=45)
    plt.grid(True, linestyle='--', alpha=0.5)
    save_chart(filename='semester_gpa_trends.png', dpi=170)
except Exception:
    pass
2025-08-20 16:22:37,956 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: chart_name='Semester GPA Trends'
2025-08-20 16:22:37,958 [INFO] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: chart_desc='학기별 GPA 변화를 시계열 선 그래프로 시각화하여 각 학기별 학점 추이를 쉽게 파악할 수 있도록 함'
2025-08-20 16:22:37,961 [DEBUG] [ChartCodeGeneratorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeGeneratorNode: Chart CodeGen end
2025-08-20 16:22:37,990 [INFO] [ChartCodeExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartCodeExecutorNode: Executing chart_code …
2025-08-20 16:22:38,284 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode:  Finished in 11.16 second
2025-08-20 16:22:38,286 [INFO] [ChartAgentExecutorNode] agent.TEST_01.2025-08-20-16-1827.ChartAgentExecutorNode: ====< END >====
2025-08-20 16:22:38,289 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< START >====
2025-08-20 16:22:38,296 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM chain constructed (prompt → llm → structured output)
2025-08-20 16:22:38,298 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Input preview: {'user_query': '학기별 GPA(학점)변화를 볼 수 있는 그래프를 그려줘줘', 'df_name': 'semester_gpa_trend', 'df_desc': '학기별 연도와 학기, GPA 정보를 추출하여 학기별 GPA 변화를 확인할 수 있도록 정리한 데이터프레임입니다.', 'chart_name': 'Semester GPA Trends', 'chart_desc': '학기별 GPA 변화를 시계열 선 그래프로 시각화하여 각 학기별 학점 추이를 쉽게 파악할 수 있도록 함', 'previous_node': 'chart_exec'}
2025-08-20 16:22:38,299 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Invoking LLM for route decision …
2025-08-20 16:22:41,684 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] LLM invocation completed
2025-08-20 16:22:41,686 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Decision → action=finish
2025-08-20 16:22:41,687 [DEBUG] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: [RouterNode] Reason: DF와 차트가 모두 user_query의 요구를 충족하므로 추가 작업이 필요 없습니다.
2025-08-20 16:22:41,688 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: finish
2025-08-20 16:22:41,688 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode:  Finished in 3.40 second
2025-08-20 16:22:41,689 [INFO] [RouterNode] agent.TEST_01.2025-08-20-16-1827.RouterNode: ====< END >====
